package = ktpack.subprocess

---
#include <errno.h>
#include <unistd.h>
#include <stdio.h>

#include <sys/types.h>
#include <sys/wait.h>


static void runAndFork(
        const char * executable,
        char *const * args,
        const char* cd,
        char *const* env,
        int stdout_fd,
        int stderr_fd,
        int stdin_fd) {
    if (stdout_fd != -1) {
        while ((dup2(stdout_fd, STDOUT_FILENO) == -1) && (errno == EINTR)) {}
        if (stdout_fd != stderr_fd) {
            close(stdout_fd);
        }
    }
    if (stderr_fd != -1) {
        while ((dup2(stderr_fd, STDERR_FILENO) == -1) && (errno == EINTR)) {}
        close(stderr_fd);
    }
    if (stdin_fd != -1) {
        while ((dup2(stdin_fd, STDIN_FILENO) == -1) && (errno == EINTR)) {}
        close(stdin_fd);
    }

    if (cd != NULL) {
        if (chdir(cd) != 0) {
            perror("Error selecting working directory");
            _exit(1);
        }
    }

    int execres;
    if (env != NULL) {
        execres = execve(executable, args, env);
    } else {
        execres = execv(executable, args);
    }
    if (execres != 0) {
        perror("Error selecting working directory");
        _exit(1);
    }
}

static pid_t forkAndRun(
        const char * executable,
        char *const * args,
        const char* cd,
        char *const* env,
        int stdout_fd,
        int stderr_fd,
        int stdin_fd,
        int op_stdout,
        int op_stderr,
        int op_stdin) {
    pid_t pid = fork();
    if (pid == 0) {
        if (op_stdout != -1) {
            close(op_stdout);
        }
        if (op_stderr != -1) {
            close(op_stderr);
        }
        if (op_stdout != -1) {
            close(op_stdin);
        }

        runAndFork(executable, args, cd, env, stdout_fd, stderr_fd, stdin_fd);
    }
    return pid;
}

static int w_exit_status(int status) {
    return WEXITSTATUS(status);
}
