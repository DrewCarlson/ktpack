{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"A simple tool for building and publishing Kotlin projects. <p> Installation - Getting Started - Documentation - Releases </p>"},{"location":"#overview","title":"Overview","text":"<p>Ktpack is a build tool for Kotlin Multiplatform projects providing a comprehensive set of features with one configuration file:</p> <ul> <li>Multiple binary application outputs and library modules</li> <li>Write tests and benchmarks inside or next to main source files</li> <li>Automatic Kotlin, JDK, and Nodejs toolchain management</li> <li>Consume Maven dependencies or npm dependencies</li> <li>Publishing libraries to Maven and applications to Github</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This page provides a brief intro to the <code>ktpack</code> command line tool. We will create a new project, build the source code, and run the compiled program.</p> <p>Create a new project with the <code>new</code> command:</p> <pre><code>$ ktpack new hello_world\n</code></pre> <p>By default, the <code>--bin</code> flag is used to create a binary program. Alternatively the <code>--lib</code> flag can be used to create a library. The command generated two files:</p> <pre><code>$ cd hello_world\n$ tree .\n.\n\u251c\u2500\u2500 pack.kts\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 common\n        \u2514\u2500\u2500 kotlin\n            \u2514\u2500\u2500 main.kt\n\n1 directory, 2 files\n</code></pre> <p>This is a basic, yet fully functional Ktpack project. The project is described in <code>pack.kts</code>:</p> <pre><code>module(\"hello_world\") {\n    version = \"1.0.0\"\n    kotlinVersion = \"1.9.20\"\n}\n</code></pre> <p>The Ktpack Script contains all the metadata required to operate a Ktpack project. In <code>src/common/kotlin/main.kt</code> we have this program:</p> <pre><code>fun main() {\n    println(\"Hello, world!\")\n}\n</code></pre> <p>The source file can be compiled into a binary with the <code>build</code> command:</p> <pre><code>$ ktpack build\n\nCompiling hello_world v1.0.0 (/users/developer/hello_world)\n</code></pre> <p>To run the executable we compiled:</p> <pre><code>$ ./out/linux_x64/debug/bin/hello_world.kexe\nHello, world!\n</code></pre> <p>Note: the <code>linux_x64</code> directory could also be <code>macosx_[x64|arm64]</code> or <code>mingw_x64</code> based on your operating system</p> <p>Alternatively we can use the <code>run</code> command:</p> <pre><code>$ ktpack run\n\nCompiling hello_world v1.0.0 (/users/developer/hello_world)\nRunning 'out/linux_x64/debug/bin/hello_world.exe'\nHello, World!\n</code></pre> <p>To build or run our program for a different target, use the <code>--target</code> or <code>-t</code> option with the <code>build</code> or <code>run</code> commands:</p> <pre><code>$ ktpack run --target jvm\n\nCompiling hello_world v1.0.0 (/users/developer/hello_world)\nRunning 'out/jvm/debug/bin/hello_world.jar'\nHello, World!\n</code></pre> <pre><code>$ ktpack run --target js_node\n\nCompiling hello_world v1.0.0 (/users/developer/hello_world)\nRunning 'out/js_node/debug/bin/hello_world.js'\nHello, World!\n</code></pre> <p>For the <code>js_browser</code> target, an HTTP Server is started which provides your program at the URL:</p> <pre><code>$ ktpack run --target js_browser\n\nCompiling hello_world v1.0.0 (/users/developer/hello_world)\nRunning 'out/js_browser/debug/bin/hello_world.js'\nHttp Server Available at http://localhost:9543\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>At this time, releases are published to Github.</p> Download v0.0.4 ktpack-linux.zip ktpack-macos.zip ktpack-windows.zip"},{"location":"installation/#macos","title":"macOS","text":"<pre><code>$ curl https://github.com/DrewCarlson/Ktpack/releases/download/v0.0.4/ktpack-macos.zip -o ktpack-macos.zip\n$ unzip ktpack-macos.zip &amp;&amp; cd ktpack-macos\n\n$ ktpack version\nKtpack version 0.0.4\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>Download the Windows release above.</li> <li>Extract the <code>ktpack-windows.zip</code> to your system, for example <code>C:\\Program Files\\ktpack-windows\\ktpack.exe</code>.</li> <li>Add to your system <code>PATH</code>: Start menu, search \"environment\", click \"Environment Variables...\".</li> </ol> <p>It is recommended you use the Terminal application for the best experience.</p>"},{"location":"installation/#linux","title":"Linux","text":"<pre><code>$ curl https://github.com/DrewCarlson/Ktpack/releases/download/v0.0.4/ktpack-linux.zip -o ktpack-linux.zip\n$ unzip ktpack-linux.zip &amp;&amp; cd ktpack-linux\n\n$ ktpack version\nKtpack version 0.0.4\n</code></pre>"},{"location":"installation/#environment-setup","title":"Environment Setup","text":"<p>Ktpack manages all the necessary tools required to build your projects. You can get started quickly with the <code>ktpack setup</code> command, this will check your environment for existing tools and install any that are missing.</p> <p>New machines will install a version of the JDK, Kotlin Compilers (Jvm/Native), and Nodejs. Note that additional tool versions may be installed depending on package requirements and all versions can be individually managed.</p>"},{"location":"limitations/","title":"Limitations","text":""},{"location":"limitations/#no-direct-ide-support","title":"No direct IDE support","text":"<p>https://github.com/DrewCarlson/ktpack/issues/85</p> <p>There is no plugin available for Intellij to understand a Ktpack project. You can still open a Ktpack project in Intellij IDEA and manually specify source folders/dependencies.</p> <p>In the future, this will be implemented either by an IDE plugin or a CLI command to sync Intellij IDEA project files.</p>"},{"location":"limitations/#no-incremental-compilation-support","title":"No incremental compilation support","text":"<p>https://github.com/DrewCarlson/ktpack/issues/86</p> <p>This would require using the Kotlin Compiler daemon which is not currently supported. For every build or test run, you are paying the cost of initializing the JVM and Kotlin Compiler.</p>"},{"location":"limitations/#jvm-testing-only-supports-junit-5-jupiter","title":"JVM testing only supports JUnit 5 Jupiter","text":"<p>https://github.com/DrewCarlson/ktpack/issues/82</p> <p>The JUnit 4 pom file contains formatting that Ktpack does not currently deal with, so it cannot yet be added as a dependency. To keep things simple, ktpack will always run JVM tests with the standalone console jar.</p>"},{"location":"limitations/#no-javascript-test-support","title":"No Javascript test support","text":"<p>https://github.com/DrewCarlson/ktpack/issues/83</p> <p>Only JVM and Native targets can be tested at the moment. Running Javascript tests requires more infrastructure and tooling (especially for browser) that is not currently implemented.</p>"},{"location":"limitations/#native-tests-do-not-produce-report-files","title":"Native tests do not produce report files","text":"<p>https://github.com/DrewCarlson/ktpack/issues/84</p> <p>I assume the Kotlin Gradle plugin achieves this by parsing the test run stdout and creating a JUnit results file. Until that is implemented, Native tests will only provide feedback in the form of console output.</p>"},{"location":"motivation/","title":"Motivation","text":"<p>A basic Kotlin library/application with Gradle requires an excessive number of files and configuration script.</p> <p>This is a poor experience for regular Kotlin users and especially first time users. Additionally, users who frequently author small or medium-sized libraries must repeat and maintain this boilerplate across projects.</p> <p>Ktpack focuses on a finite set of features from a rigid but thorough project structure, allowing you to get more out of your code with less script configuration to glue things together. Ktpack follows Cargo closely for inspiration.</p>"},{"location":"development/cli-architecture/","title":"CLI Architecture","text":"<p>The main Ktpack CLI is a Kotlin/Native program. It provides most of the functionality like toolchain management, fetching resources, and launching compilers/tools.</p> <p>The <code>ktpack-script.jar</code> provides the APIs necessary for <code>pack.kts</code> scripts to function. The cli uses it to evaluate pack scripts which return a JSON result.</p> <p>With the pack json model, the cli understands the project tooling and build requirements. It can also use the <code>ktpack-script.jar</code> to invoke tasks from the pack script.</p>"},{"location":"development/documentation/","title":"Documentation","text":"<p>Documentation is created with MkDocs using Material for MkDocs. MkDocs is configured with <code>mkdocs.yml</code> and documentation source is stored in the <code>docs</code> folder.</p>"},{"location":"development/documentation/#install-python","title":"Install Python","text":"<p>Download and install the latest version of Python.</p> macOS Windows"},{"location":"development/documentation/#macos","title":"macOS","text":"<p>Using Homebrew</p> <pre><code>brew install python\n</code></pre>"},{"location":"development/documentation/#windows","title":"Windows","text":"<p>Download and install the recommended version from python.org.</p> <p>Or with Chocolatey</p> <pre><code>choco install python\n</code></pre>"},{"location":"development/documentation/#install-mkdocs-and-plugins","title":"Install MkDocs and plugins","text":"<p>Open a new Terminal or Command Prompt window.</p> <pre><code>pip install mkdocs mkdocs-material mkdocs-markdownextradata-plugin\n</code></pre> <p>For more information see the MkDocs Installation Guide and the Material for MkDocs Installation Guide.</p>"},{"location":"development/documentation/#writing-documentation","title":"Writing Documentation","text":"<p>Documentation source files are written in Markdown. For navigation and advanced formatting features, see the MkDocs Writing your docs guide and Material for MkDocs Reference.</p> Variables <p>Some dynamic variables are made available, they can be used with the <code>{{ name }}</code> syntax. Below are the available variables.</p> Name Value project The project name for the repository lib_version The current release version, for example <code>2.3.5</code> (No <code>v</code> prefix)"},{"location":"development/documentation/#view-docs-locally","title":"View docs locally","text":"<p>To view the docs locally, open a terminal or command prompt and cd into your <code>Ktpack</code> folder then run</p> <pre><code>mkdocs serve\n</code></pre> <p>Your changes will be served at http://127.0.0.1:8000. After saving changes, the webpage will reload automatically.</p>"},{"location":"development/documentation/#deployment","title":"Deployment","text":"<p>Changes are deployed automatically for tagged releases using mike.</p>"},{"location":"development/environment-setup/","title":"Environment Setup","text":""},{"location":"development/environment-setup/#development","title":"Development","text":"<p>Checkout with <code>git clone git@github.com:DrewCarlson/ktpack.git --recurse-submodules</code></p> <p>(ensure submodules are initialized and updated!! If unsure, run <code>git submodule update --init</code>)</p> <p>For Linux and macOS, there should be no extra steps.</p>"},{"location":"development/environment-setup/#windows","title":"Windows","text":"<ul> <li>Install msys2</li> <li>Add <code>C:\\msys64\\mingw64\\bin</code> to the top of your <code>PATH</code> variable (restart intellij)</li> <li>Open <code>MSYS2 MinGW 64-bit</code> and run <code>mv /mingw64/bin/gcc /mingw64/bin/gcc-disable</code></li> <li>Run the <code>ktpack[windowsX64]</code> target from Intellij</li> </ul> <p>Compiling native components with Gradle is generally unpleasant and difficult to control. Gradle does not allow manual selection of the C/C++ compiler and defaults to Visual Studio or GCC if available. This results in library outputs that Kotlin/Native's toolchain cannot process, therefore we must disable GCC/Visual Studio so Clang is selected.</p>"}]}