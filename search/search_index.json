{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A simple tool for building and publishing Kotlin software. Installation - Getting Started - Documentation - Releases","title":"Home"},{"location":"development/","text":"Development Checkout with git clone git@github.com:DrewCarlson/ktpack.git --recurse-submodules (ensure submodules are initialized and updated!! If unsure, run git submodule update --init ) For Linux and macOS, there should be no extra steps. Windows Install msys2 Add C:\\msys64\\mingw64\\bin to the top of your PATH variable (restart intellij) Open MSYS2 MinGW 64-bit and run mv /mingw64/bin/gcc /mingw64/bin/gcc-disable Run the ktpack[windowsX64] target from Intellij Compiling native components with Gradle is generally unpleasant and difficult to control. Gradle does not allow manual selection of the C/C++ compiler and defaults to Visual Studio or GCC if available. This results in library outputs that Kotlin/Native's toolchain cannot process, therefore we must disable GCC/Visual Studio so Clang is selected.","title":"Development"},{"location":"development/#development","text":"Checkout with git clone git@github.com:DrewCarlson/ktpack.git --recurse-submodules (ensure submodules are initialized and updated!! If unsure, run git submodule update --init ) For Linux and macOS, there should be no extra steps.","title":"Development"},{"location":"development/#windows","text":"Install msys2 Add C:\\msys64\\mingw64\\bin to the top of your PATH variable (restart intellij) Open MSYS2 MinGW 64-bit and run mv /mingw64/bin/gcc /mingw64/bin/gcc-disable Run the ktpack[windowsX64] target from Intellij Compiling native components with Gradle is generally unpleasant and difficult to control. Gradle does not allow manual selection of the C/C++ compiler and defaults to Visual Studio or GCC if available. This results in library outputs that Kotlin/Native's toolchain cannot process, therefore we must disable GCC/Visual Studio so Clang is selected.","title":"Windows"},{"location":"getting-started/","text":"This page provides a brief intro to the ktpack command line tool. We will create a new project, build the source code, and run the compiled program. Create a new project with the new command: $ ktpack new hello_world By default, the --bin flag is used to create a binary program. Alternatively the --lib flag can be used to create a library. The command generated two files: $ cd hello_world $ tree . . \u251c\u2500\u2500 package.kts \u2514\u2500\u2500 src \u2514\u2500\u2500 main.kt 1 directory, 2 files This is a basic, yet fully functional Ktpack project. The project is described in package.kts : module ( \"hello_world\" ) { version = \"1.0.0\" kotlinVersion = \"1.7.10\" } The Package Script contains all the metadata required to operate a Ktpack project. In src/main.kt we have this program: fun main () { println ( \"Hello, world!\" ) } The source file can be compiled into a binary with the build command: $ ktpack build Compiling hello_world v1.0.0 ( /users/developer/hello_world ) To run the executable we compiled: $ ./out/linux_x64/debug/bin/hello_world.kexe Hello, world! Note: the linux_x64 directory could also be macosx_[x64|arm64] or mingw_x64 based on your operating system Alternatively we can use the run command: $ ktpack run Compiling hello_world v1.0.0 ( /users/developer/hello_world ) Running 'out/linux_x64/debug/bin/hello_world.exe' Hello, World! To build or run our program for a different target, use the --target or -t option with the build or run commands: $ ktpack run --target jvm Compiling hello_world v1.0.0 ( /users/developer/hello_world ) Running 'out/jvm/debug/bin/hello_world.jar' Hello, World! $ ktpack run --target js_node Compiling hello_world v1.0.0 ( /users/developer/hello_world ) Running 'out/js_node/debug/bin/hello_world.js' Hello, World! For the js_browser target, an HTTP Server is started which provides your program at the URL: $ ktpack run --target js_browser Compiling hello_world v1.0.0 ( /users/developer/hello_world ) Running 'out/js_browser/debug/bin/hello_world.js' Http Server Available at http://localhost:9543","title":"Getting Started"},{"location":"installation/","text":"Installation Releases are published to Github . macOS $ curl https://github.com/DrewCarlson/Ktpack/releases/latest/download/ktpack-macos.zip -o ktpack-macos.zip $ unzip ktpack-macos.zip && cd ktpack-macos $ ktpack version Ktpack version 1 .0.0-SNAPSHOT Windows Linux $ curl https://github.com/DrewCarlson/Ktpack/releases/latest/download/ktpack-linux.zip -o ktpack-linux.zip $ unzip ktpack-linux.zip && cd ktpack-linux $ ktpack version Ktpack version 1 .0.0-SNAPSHOT","title":"Installation"},{"location":"installation/#installation","text":"Releases are published to Github .","title":"Installation"},{"location":"installation/#macos","text":"$ curl https://github.com/DrewCarlson/Ktpack/releases/latest/download/ktpack-macos.zip -o ktpack-macos.zip $ unzip ktpack-macos.zip && cd ktpack-macos $ ktpack version Ktpack version 1 .0.0-SNAPSHOT","title":"macOS"},{"location":"installation/#windows","text":"","title":"Windows"},{"location":"installation/#linux","text":"$ curl https://github.com/DrewCarlson/Ktpack/releases/latest/download/ktpack-linux.zip -o ktpack-linux.zip $ unzip ktpack-linux.zip && cd ktpack-linux $ ktpack version Ktpack version 1 .0.0-SNAPSHOT","title":"Linux"},{"location":"motivation/","text":"Motivation Kotlin projects using gradle that support publishing, binary/library outputs, multiplatform support, tests, etc. require 7+ files with various scripts, configuration, and a specific folder structure. This is a poor experience for regular Kotlin users and especially first time users. Additionally, users who frequently author small or medium-sized libraries must repeat and maintain this boilerplate across projects. Ktpack focuses on a finite set of features from a rigid but thorough project structure, allowing you to get more out of your code with less script configuration to glue things together. Ktpack follows Cargo closely for inspiration.","title":"Motivation"},{"location":"motivation/#motivation","text":"Kotlin projects using gradle that support publishing, binary/library outputs, multiplatform support, tests, etc. require 7+ files with various scripts, configuration, and a specific folder structure. This is a poor experience for regular Kotlin users and especially first time users. Additionally, users who frequently author small or medium-sized libraries must repeat and maintain this boilerplate across projects. Ktpack focuses on a finite set of features from a rigid but thorough project structure, allowing you to get more out of your code with less script configuration to glue things together. Ktpack follows Cargo closely for inspiration.","title":"Motivation"}]}